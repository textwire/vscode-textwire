{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "text.html.basic.tw",
    "name": "Textwire",
    "fileTypes": [ "tw.html" ],
    "patterns": [
        { "include": "text.html.basic" }
    ],
    "injections": {
        "text.html.basic.tw - (comment.block.tw), L:(text.html.basic.tw - comment.block.tw), L:(source.js.embedded.html - comment.block.tw)": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#expression" },
                { "include": "#directives" }
            ]
        }
    },
    "repository": {
        "expression": {
            "name": "keyword.tw",
            "begin": "(?<![\\\\{]){{",
            "beginCaptures": { "0": { "name": "support.function.construct.begin.tw" } },
            "end": "}}",
            "endCaptures": { "0": { "name": "support.function.construct.begin.tw" } },
            "patterns": [ { "include": "#language" } ]
        },
        "language": {
            "patterns": [
                { "include": "#functions" },
                { "include": "#strings" },
                { "include": "#numbers" },
                { "include": "#keywords" },
                { "include": "#arrays" },
                { "include": "#objects" },
                { "include": "#commas" },
                { "include": "#variables" }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(?:true|false|nil|in)\\b",
                    "captures": { "0": { "name": "constant.language.tw" } }
                }
            ]
        },
        "directives": {
            "patterns": [
                {
                    "begin": "(?<![\\\\@])(@(if|elseif|for|use|each|breakIf|continueIf|insert|reserve|component)) ?(\\()",
                    "beginCaptures": { "0": { "name": "entity.name.function.member.tw" } },
                    "end": "\\)",
                    "endCaptures": { "0": { "name": "entity.name.function.member.tw" } },
                    "patterns": [ { "include": "#language" } ]
                },
                {
                    "match": "\\b\\w*(@(else|end|break|continue))\\b",
                    "captures": { "1": { "name": "entity.name.function.member.tw" } }
                },
                {
                    "name": "entity.name.function.member.tw",
                    "match": "(?<![\\\\@])(@(else|end|break|continue))"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.tw",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.tw",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.tw",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.tw",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.tw",
            "match": "\\b[\\d.]+\\b"
        },
        "functions": {
            "begin": "((len|raw|split|trim|float|int) ?\\()",
            "beginCaptures": { "0": { "name": "entity.name.function.member.tw" } },
            "end": "\\)",
            "endCaptures": { "0": { "name": "entity.name.function.member.tw" } },
            "patterns": [ { "include": "#language" } ]
        },
        "arrays": {
            "begin": "\\[",
            "end": "]",
            "patterns": [ { "include": "#language" } ]
        },
        "objects": {
            "begin": "{",
            "end": "}",
            "patterns": [ { "include": "#language" } ]
        },
        "variables": {
            "name": "variable.other.tw",
            "match": "\\b\\w+\\.?\\b"
        },
        "comments": {
            "begin": "{{--",
            "beginCaptures": { "0": { "name": "punctuation.definition.comment.begin.tw" } },
            "end": "--}}",
            "endCaptures": { "0": { "name": "punctuation.definition.comment.end.tw" } },
            "name": "comment.block.tw"
        },
        "commas": {
            "name": "variable.other.tw",
            "match": ","
        }
    }
}